level_comp_HHI <- c(Café = "Café",
CAFÉ = "Café",
Carne = "Carne",
CARNE = "Carne",
Fruta = "Frutas")
## Modificación del formato y transformación de variables
Data <- transform(Data,
genero=factor(dplyr::recode(genero, !!!level_genero)),
zona=factor(dplyr::recode(zona, !!!level_zona)),
grado = factor(dplyr::recode(grado,!!!level_grado)),
comp_HHD = dplyr::recode(comp_HHD, !!!level_comp_HHD),
comp_HHI = dplyr::recode(comp_HHI, !!!level_comp_HHI))
Data <- read.table(here("Data","BD_huella.txt"), header = TRUE, sep = "\t")
## Modificación del formato y transformación de variables
Data <- transform(Data,
genero=factor(dplyr::recode(genero, !!!level_genero)),
zona=factor(dplyr::recode(zona, !!!level_zona)),
grado = factor(dplyr::recode(grado,!!!level_grado)),
comp_HHD = dplyr::recode(comp_HHD, !!!level_comp_HHD),
comp_HHI = dplyr::recode(comp_HHI, !!!level_comp_HHI))
str(Data)
# 2.  Construya el archivo: consistencia.txt, en el cual incluya las ecuaciones que usted considera necesarias para verificar la consistencia de los datos en el conjunto de variables.
cat("HHD >= 0\nHHI >= 0\nedad >= 10 \nper.hog >= 1", file = "consistencia.txt")
Rules <- editrules::editfile("consistencia.txt")
Rules
plot(Rules)
Valid_Data = editrules::violatedEdits(Rules,Data)
Valid_Data
summary(Valid_Data)
which(Valid_Data)
matrix(data=1:55, 5, 11)
windows()
plot(Valid_Data)
is.na(Data) # Creamos una matriz con los datos faltantes
visdat::vis_miss(Data) # Visualizamos en grafico los datos faltantes
miss<-function(Datos,plot=T){
n=nrow(Datos);p=ncol(Datos)
names.obs<-rownames(Datos)
nobs.comp=sum(complete.cases(Datos))         # Cuenta los registros completos
Obs.comp=which(complete.cases(Datos))        # Identifica los registros completos
nobs.miss = sum(!complete.cases(Datos))      # Identifica los registros con datos faltantes.
Obs.miss=which(!complete.cases(Datos))       # Identifica los registros con datos faltantes.
Datos.NA<-is.na(Datos)
Var_Num<- sort(colSums(Datos.NA),decreasing=T)
Var_per<-round(Var_Num/n,3)
Obs_Num<-rowSums(Datos.NA)
names(Obs_Num)<-names.obs
Obs_Num<-sort(Obs_Num,decreasing=T)
Obs_per<-round(Obs_Num/p,3)
lista<-list(n.row = n, n.col = p,n.comp = nobs.comp,Obs.comp = Obs.comp,n.miss = nobs.miss,Obs.miss = Obs.miss, Var.n = Var_Num , Var.p = Var_per, Obs.n= Obs_Num, Obs.per= Obs_per)
if(plot){
windows(height=10,width=15)
par(mfrow=c(1,2))
coord<-barplot(Var_per,plot=F)
barplot(Var_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por variable", col="blue")
axis(2,at=coord,labels=names(Var_per), cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2),pos=0)
coord<-barplot(Obs_per,plot=F)
barplot(Obs_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por registro", col="green")
axis(2,at=coord,labels=names(Obs_per),cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2))
}
return(invisible(lista))
}
Summary.NA = miss(Data)
## Imputación por vecindad (KNN)
Data_ImputKNN <- DMwR2::knnImputation(Data,k=5,scale=T,meth = "weighAvg")
imputR = mice::mice(Data, maxit = 1, method = "norm.predict",seed = 2018,print=F)
Datos_ImputR = mice::complete(imputR)
View(Datos_ImputR)
View(Datos_ImputR)
View(Data)
View(Datos_ImputR)
windows(height=10,width=15); visdat::vis_miss(Datos_ImputR)
View(Datos_ImputR)
imputR = mice::mice(Data, method = "norm.predict")
Datos_ImputR = mice::complete(imputR)
View(Datos_ImputR)
Data_ImputM = mice::complete(imputM)
imputM = mice::mice(Data, method = "mean")
Data_ImputM = mice::complete(imputM)
View(Data_ImputM)
## Imputación por vecindad (KNN)
Datos_ImputKNN <- DMwR2::knnImputation(Datos,k=5,meth = "weighAvg")
## Imputación por vecindad (KNN)
Datos_ImputKNN <- DMwR2::knnImputation(Datos,k=3,meth = "weighAvg")
## Imputación por vecindad (KNN)
Datos_ImputKNN <- DMwR2::knnImputation(Data,k=5,meth = "weighAvg")
## Imputación por vecindad (KNN)
Datos_ImputKNN <- DMwR2::knnImputation(Data,k=3,meth = "weighAvg")
View(Datos_ImputR)
View(Datos_ImputR)
Data <- read.table(here("Data","BD_huella.txt"), header = TRUE, sep = "\t")
# Declaración de niveles correctos para las variables tipo Factor
level_genero <- c("1" = 1,
"2" = 2,
femenino = 1,
Femenino = 1,
FEMENINO = 1,
masculino = 2,
Masculino = 2,
MASCULINO = 2
)
level_zona <- c("1" = 1,
"2"= 2,
Urbano = 1,
URBANO = 1,
Rural= 2,
RURAL= 2
)
level_grado <- c("6" = 6,
"7" = 7,
"8" = 8,
"9" = 9,
"10" = 10,
"11" = 11,
sexto = 6,
SEXTO = 6,
septimo = 7,
SEPTIMO = 7,
octavo = 8,
OCTAVO = 8,
noveno = 9,
NOVENO = 9,
decimo = 10,
DECIMO = 10,
once = 11,
ONCE = 11
)
level_comp_HHD <- c(Lavado.ropa = "Lavado.ropa",
Riego.jardin = "Riego.jardin",
Uso.baño = "Uso.baño",
USO.BAÑO = "Uso.baño",
Uso_baño = "Uso.baño",
Uso.cocina = "Uso.cocina")
level_comp_HHI <- c(Café = "Café",
CAFÉ = "Café",
Carne = "Carne",
CARNE = "Carne",
Fruta = "Frutas")
## Modificación del formato y transformación de variables
Data <- transform(Data,
genero=factor(dplyr::recode(genero, !!!level_genero)),
zona=factor(dplyr::recode(zona, !!!level_zona)),
grado = factor(dplyr::recode(grado,!!!level_grado)),
comp_HHD = dplyr::recode(comp_HHD, !!!level_comp_HHD),
comp_HHI = dplyr::recode(comp_HHI, !!!level_comp_HHI))
# 2.  Construya el archivo: consistencia.txt, en el cual incluya las ecuaciones que usted considera necesarias para verificar la consistencia de los datos en el conjunto de variables.
cat("HHD >= 0\nHHI >= 0\nedad >= 10 \nper.hog >= 1", file = "consistencia.txt")
Rules <- editrules::editfile("consistencia.txt")
Rules
plot(Rules)
Valid_Data = editrules::violatedEdits(Rules,Data)
Valid_Data
summary(Valid_Data)
which(Valid_Data)
matrix(data=1:55, 5, 11)
is.na(Data) # Creamos una matriz con los datos faltantes
nobs.comp=sum(complete.cases(Datos))         # Cuenta los registros completos
names.obs<-rownames(Datos)
miss<-function(Data,plot=T){
n=nrow(Datos);p=ncol(Data)
names.obs<-rownames(Data)
nobs.comp=sum(complete.cases(Data))         # Cuenta los registros completos
Obs.comp=which(complete.cases(Data))        # Identifica los registros completos
nobs.miss = sum(!complete.cases(Data))      # Identifica los registros con datos faltantes.
Obs.miss=which(!complete.cases(Data))       # Identifica los registros con datos faltantes.
Datos.NA<-is.na(Data)
Var_Num<- sort(colSums(Data.NA),decreasing=T)
Var_per<-round(Var_Num/n,3)
Obs_Num<-rowSums(Data.NA)
names(Obs_Num)<-names.obs
Obs_Num<-sort(Obs_Num,decreasing=T)
Obs_per<-round(Obs_Num/p,3)
lista<-list(n.row = n, n.col = p,n.comp = nobs.comp,Obs.comp = Obs.comp,n.miss = nobs.miss,Obs.miss = Obs.miss, Var.n = Var_Num , Var.p = Var_per, Obs.n= Obs_Num, Obs.per= Obs_per)
if(plot){
windows(height=10,width=15)
par(mfrow=c(1,2))
coord<-barplot(Var_per,plot=F)
barplot(Var_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por variable", col="blue")
axis(2,at=coord,labels=names(Var_per), cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2),pos=0)
coord<-barplot(Obs_per,plot=F)
barplot(Obs_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por registro", col="green")
axis(2,at=coord,labels=names(Obs_per),cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2))
}
return(invisible(lista))
}
Summary.NA = miss(Data)
Summary.NA = miss(Data)
miss<-function(Data,plot=T){
n=nrow(Data);p=ncol(Data)
names.obs<-rownames(Data)
nobs.comp=sum(complete.cases(Data))         # Cuenta los registros completos
Obs.comp=which(complete.cases(Data))        # Identifica los registros completos
nobs.miss = sum(!complete.cases(Data))      # Identifica los registros con datos faltantes.
Obs.miss=which(!complete.cases(Data))       # Identifica los registros con datos faltantes.
Datos.NA<-is.na(Data)
Var_Num<- sort(colSums(Data.NA),decreasing=T)
Var_per<-round(Var_Num/n,3)
Obs_Num<-rowSums(Data.NA)
names(Obs_Num)<-names.obs
Obs_Num<-sort(Obs_Num,decreasing=T)
Obs_per<-round(Obs_Num/p,3)
lista<-list(n.row = n, n.col = p,n.comp = nobs.comp,Obs.comp = Obs.comp,n.miss = nobs.miss,Obs.miss = Obs.miss, Var.n = Var_Num , Var.p = Var_per, Obs.n= Obs_Num, Obs.per= Obs_per)
if(plot){
windows(height=10,width=15)
par(mfrow=c(1,2))
coord<-barplot(Var_per,plot=F)
barplot(Var_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por variable", col="blue")
axis(2,at=coord,labels=names(Var_per), cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2),pos=0)
coord<-barplot(Obs_per,plot=F)
barplot(Obs_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por registro", col="green")
axis(2,at=coord,labels=names(Obs_per),cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2))
}
return(invisible(lista))
}
Summary.NA = miss(Data)
miss<-function(Data,plot=T){
n=nrow(Data);p=ncol(Data)
names.obs<-rownames(Data)
nobs.comp=sum(complete.cases(Data))         # Cuenta los registros completos
Obs.comp=which(complete.cases(Data))        # Identifica los registros completos
nobs.miss = sum(!complete.cases(Data))      # Identifica los registros con datos faltantes.
Obs.miss=which(!complete.cases(Data))       # Identifica los registros con datos faltantes.
Data.NA<-is.na(Data)
Var_Num<- sort(colSums(Data.NA),decreasing=T)
Var_per<-round(Var_Num/n,3)
Obs_Num<-rowSums(Data.NA)
names(Obs_Num)<-names.obs
Obs_Num<-sort(Obs_Num,decreasing=T)
Obs_per<-round(Obs_Num/p,3)
lista<-list(n.row = n, n.col = p,n.comp = nobs.comp,Obs.comp = Obs.comp,n.miss = nobs.miss,Obs.miss = Obs.miss, Var.n = Var_Num , Var.p = Var_per, Obs.n= Obs_Num, Obs.per= Obs_per)
if(plot){
windows(height=10,width=15)
par(mfrow=c(1,2))
coord<-barplot(Var_per,plot=F)
barplot(Var_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por variable", col="blue")
axis(2,at=coord,labels=names(Var_per), cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2),pos=0)
coord<-barplot(Obs_per,plot=F)
barplot(Obs_per,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por registro", col="green")
axis(2,at=coord,labels=names(Obs_per),cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2))
}
return(invisible(lista))
}
Summary.NA = miss(Data)
imputM = mice::mice(Data, method = "mean")
Data_ImputM = mice::complete(imputM)
View(Data_ImputM)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(Humidity,freq=F,col="blue",breaks=13)
boxplot(Humidity,horizontal=T,col="blue")
hist(scale(Humidity),freq=F,col="blue",breaks=13)
}
)
with(Data,{
hist(HHD,freq=F,col="blue",breaks=13)
boxplot(HHD,horizontal=T,col="blue")
hist(scale(HHD),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(HHD,freq=F,col="blue",breaks=13)
boxplot(HHD,horizontal=T,col="blue")
hist(scale(HHD),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(HHI,freq=F,col="blue",breaks=13)
boxplot(HHI,horizontal=T,col="blue")
hist(scale(HHI),freq=F,col="blue",breaks=13)
}
x11()
x11()
par(mfrow=c(3,1))
with(Data,{
hist(HHI,freq=F,col="blue",breaks=13)
boxplot(HHI,horizontal=T,col="blue")
hist(scale(HHI),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(HHD,freq=F,col="blue",breaks=13)
boxplot(HHD,horizontal=T,col="blue")
hist(scale(HHD),freq=F,col="blue",breaks=13)
}
)
View(Data)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(per.hog,freq=F,col="blue",breaks=13)
boxplot(per.hog,horizontal=T,col="blue")
hist(scale(per.hog),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
barplot(per.hog,freq=F,col="blue",breaks=13)
boxplot(per.hog,horizontal=T,col="blue")
barplot(scale(per.hog),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
hist(HHI,freq=F,col="blue",breaks=13)
boxplot(HHI,horizontal=T,col="blue")
hist(scale(HHI),freq=F,col="blue",breaks=13)
}
)
x11()
par(mfrow=c(3,1))
with(Data,{
barplot(per.hog,freq=F,col="blue",breaks=13)
boxplot(per.hog,horizontal=T,col="blue")
barplot(scale(per.hog),freq=F,col="blue",breaks=13)
}
)
id.out.uni=function(x,method=c("Standarized","Tukey","Cook")){
id.out=NULL
if(method=="Standarized"){id.out=which(abs(scale(x))>3)}
else if(method=="Tukey"){id.out=which(x%in%(boxplot.stats(x)$out))}
else if(method=="Cook"){model=lm(x~1);CD=cooks.distance(model)
id.out=unname(which(CD>4*mean(CD)))}
return(id.out)
}
id.out.uni(Data$HHD,method="Standarized")
id.out.uni(Data$HHD,method="Tukey")
id.out.uni(Data$HHD,method="Cook")
id.out.uni(Data$HHI,method="Standarized")
id.out.uni(Data$HHI,method="Tukey")
id.out.uni(Data$HHI,method="Cook")
id.out.uni(Data$per.hog,method="Standarized")
id.out.uni(Data$per.hog,method="Tukey")
id.out.uni(Data$per.hog,method="Cook")
View(Data)
out_Stand = lapply(Data[,-(1:3)],id.out.uni,method="Standarized")
### Identificar los Datos Atipicos
out_Stand = lapply(Data[,-(1:3)],id.out.uni,method="Standarized")
out_Tukey = lapply(Data[,-(1:3)],id.out.uni,method="Tukey")
out_Cook = lapply(Data[,-(1:3)],id.out.uni,method="Cook")
#Visualizar
windows()
par(mfrow=c(2,5))
lapply(Data[,-(1:3)],boxplot,col="Blue")
### Identificar los Datos Atipicos
out_Stand = lapply(Datos[,-(1:3)],id.out.uni,method="Standarized")
### Identificar los Datos Atipicos
out_Stand = lapply(Data[,-(1:3)],id.out.uni,method="Standarized")
#Visualizar
windows()
par(mfrow=c(2,5))
lapply(Data[,-(1:4)],boxplot,col="Blue")
windows()
par(mfrow=c(1,5))
lapply(Data[,-(1:3)],boxplot,col="Blue")
windows()
par(mfrow=c(1,4))
lapply(Data[,-(1:3)],boxplot,col="Blue")
#Visualizar
windows()
par(mfrow=c(1,4))
lapply(Data[,-(2:3)],boxplot,col="Blue")
#Visualizar
windows()
par(mfrow=c(1,4))
lapply(Data[,-(1:5)],boxplot,col="Blue")
#Visualizar
windows()
par(mfrow=c(1,4))
lapply(Data[,-(1:3)],boxplot,col="Blue")
x11()
par(mfrow=c(2,1))
with(Data,{
barplot(per.hog,freq=F,col="blue",breaks=13)
boxplot(per.hog,horizontal=T,col="blue")
}
)
### Identificar los Datos Atipicos
out_Stand = lapply(Data$HHD,id.out.uni,method="Standarized")
out_Tukey = lapply(Data$HHD,id.out.uni,method="Tukey")
out_Cook = lapply(Data$HHD,id.out.uni,method="Cook")
### Identificar los Datos Atipicos
out_Stand = lapply(Data$HHD,id.out.uni,method="Standarized")
out_Tukey = lapply(Data$HHD,id.out.uni,method="Tukey")
out_Cook = lapply(Data$HHD,id.out.uni,method="Cook")
out_Stand = lapply(Data_ImputM$HHD,id.out.uni,method="Standarized")
out_Tukey = lapply(Data_ImputM$HHD,id.out.uni,method="Tukey")
out_Cook = lapply(Data_ImputM$HHD,id.out.uni,method="Cook")
View(out_Cook)
View(out_Stand)
View(out_Stand)
View(out_Tukey)
# per.hog
id.out.uni(Data$per.hog,method="Standarized")
id.out.uni(Data$per.hog,method="Tukey")
id.out.uni(Data$per.hog,method="Cook")
write.table(setdiff(Data, Data_ImputM), "ReporteCambios.txt", sep="\t", row.names=FALSE)
View(imputM)
View(Data_ImputM)
write.table(setdiff(Data_ImputM, Data), "ReporteCambios.txt", sep="\t", row.names=FALSE)
library(easypackages)
easypackages::packages(lib_req)
Data <- read.table(here("Data","BD_huella.txt"), header = TRUE, sep = "\t")
# Declaración de niveles correctos para las variables tipo Factor
level_genero <- c("1" = 1,
"2" = 2,
femenino = 1,
Femenino = 1,
FEMENINO = 1,
masculino = 2,
Masculino = 2,
MASCULINO = 2
)
level_zona <- c("1" = 1,
"2"= 2,
Urbano = 1,
URBANO = 1,
Rural= 2,
RURAL= 2
)
level_grado <- c("6" = 6,
"7" = 7,
"8" = 8,
"9" = 9,
"10" = 10,
"11" = 11,
sexto = 6,
SEXTO = 6,
septimo = 7,
SEPTIMO = 7,
octavo = 8,
OCTAVO = 8,
noveno = 9,
NOVENO = 9,
decimo = 10,
DECIMO = 10,
once = 11,
ONCE = 11
)
level_comp_HHD <- c(Lavado.ropa = "Lavado.ropa",
Riego.jardin = "Riego.jardin",
Uso.baño = "Uso.baño",
USO.BAÑO = "Uso.baño",
Uso_baño = "Uso.baño",
Uso.cocina = "Uso.cocina")
level_comp_HHI <- c(Café = "Café",
CAFÉ = "Café",
Carne = "Carne",
CARNE = "Carne",
Fruta = "Frutas")
## Modificación del formato y transformación de variables
Data <- transform(Data,
genero=factor(dplyr::recode(genero, !!!level_genero)),
zona=factor(dplyr::recode(zona, !!!level_zona)),
grado = factor(dplyr::recode(grado,!!!level_grado)),
comp_HHD = factor(dplyr::recode(comp_HHD, !!!level_comp_HHD)),
comp_HHI = factor(dplyr::recode(comp_HHI, !!!level_comp_HHI)))
# 2.  Construya el archivo: consistencia.txt, en el cual incluya las ecuaciones que usted considera necesarias para verificar la consistencia de los datos en el conjunto de variables.
cat("HHD >= 0\nHHI >= 0\nedad >= 10 \nper.hog >= 1", file = "consistencia.txt")
Rules <- editrules::editfile("consistencia.txt")
Rules
Valid_Data = editrules::violatedEdits(Rules,Data)
Valid_Data
summary(Valid_Data)
which(Valid_Data)
matrix(data=1:55, 5, 11)
is.na(Data) # Creamos una matriz con los datos faltantes
visdat::vis_miss(Data) # Visualizamos en grafico los datos faltantes
names.obs<-rownames(Data)
id.out=unname(which(CD>4*mean(CD)))}
# Identificar datos atipicos
id.out.uni=function(x,method=c("Standarized","Tukey","Cook")){
id.out=NULL
if(method=="Standarized"){id.out=which(abs(scale(x))>3)}
else if(method=="Tukey"){id.out=which(x%in%(boxplot.stats(x)$out))}
else if(method=="Cook"){model=lm(x~1);CD=cooks.distance(model)
id.out=unname(which(CD>4*mean(CD)))}
return(id.out)
}
imputM = mice::mice(Data, method = "mean")
Data_ImputM = mice::complete(imputM)
write.table(setdiff(Data_ImputM, Data), "ReporteCambios.txt", sep="\t", row.names=FALSE)
#
write.txt(Data, "clean_huella.txt", row.names = FALSE)
#
write.table(Data, file = "clean_huella.txt", sep = "\t", row.names = FALSE, quote = FALSE)
#
write.table(Data_ImputM, file = "clean_huella.txt", sep = "\t", row.names = FALSE, quote = FALSE)
Data_ImputM$HHT <- Data_ImputM$HHD + Data_ImputM$HHI
View(Data_ImputM)
# Clasificación
Data_ImputM$HHT_clas <- cut(
Data_ImputM$HHT,
breaks = c(-Inf, 1789, 1887, Inf),
labels = c("bajo", "medio", "alto")
)
